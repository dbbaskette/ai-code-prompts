#!/bin/bash
# AI Prompt Project Generator

set -euo pipefail

# Source directory is the repo root where this script lives
SRC_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# App types available for selection
APP_TYPES=(
  "spring_boot_service"
  "cli_tool"
  "ml_pipeline"
  "data_pipeline"
  "mcp_server"
  "app_web"
  "service_api"
)

echo ""
echo "🚀 AI Prompt Project Generator"
echo "================================"
echo ""

read -rp "📁 Enter base directory for prompt deployment: " DEST_ROOT
# expand ~ if present
DEST_ROOT="${DEST_ROOT/#\~/$HOME}"
mkdir -p "$DEST_ROOT"

read -rp "📦 Enter a name for this prompt project (metadata only): " PROJECT_NAME
PROJECT_PATH="$DEST_ROOT"

echo ""
echo "🧠 Select application types by entering numbers separated by spaces:"
for i in "${!APP_TYPES[@]}"; do
  printf "  %d) %s\n" "$i" "${APP_TYPES[$i]}"
done

read -rp $'\n> ' -a SELECTED_INDEXES

echo ""
echo "✅ You selected:"
SELECTED_TYPES=()
for i in "${SELECTED_INDEXES[@]}"; do
  if [[ "$i" =~ ^[0-9]+$ ]] && (( i >= 0 && i < ${#APP_TYPES[@]} )); then
    echo "   - ${APP_TYPES[$i]}"
    SELECTED_TYPES+=("${APP_TYPES[$i]}")
  else
    echo "   ! Skipping invalid selection: $i"
  fi
done
echo ""

# Ensure destination structure and copy base
mkdir -p "$PROJECT_PATH/prompt/_base"
cp "$SRC_DIR/prompt/_base/core_prompt.md" "$PROJECT_PATH/prompt/_base/"

# Copy selected prompt folders
shopt -s nullglob
for APP in "${SELECTED_TYPES[@]}"; do
  mkdir -p "$PROJECT_PATH/prompt/$APP"
  for f in "$SRC_DIR/prompt/$APP/"*.md; do
    cp "$f" "$PROJECT_PATH/prompt/$APP/"
  done
done
shopt -u nullglob

# Generate combined prompt (only selected app types)
COMBINED="$PROJECT_PATH/combined_prompt.md"
echo "# Combined Prompt\n" > "$COMBINED"
echo -e "\n---\n\n# From: prompt/_base/core_prompt.md\n" >> "$COMBINED"
cat "$PROJECT_PATH/prompt/_base/core_prompt.md" >> "$COMBINED"

for APP in "${SELECTED_TYPES[@]}"; do
  for f in "$PROJECT_PATH/prompt/$APP/"*.md; do
    echo -e "\n---\n\n# From: prompt/${APP}/$(basename "$f")\n" >> "$COMBINED"
    cat "$f" >> "$COMBINED"
  done
done

# Create convenience aliases
cp "$COMBINED" "$PROJECT_PATH/.claude.md"
cp "$COMBINED" "$PROJECT_PATH/.gemini.md"

# Generate tool metadata referencing modular files
CURSOR_JSON="$PROJECT_PATH/.cursor.json"
WDS_JSON="$PROJECT_PATH/.windsurf.json"

# Build JSON arrays dynamically
PROMPTS_JSON="\"prompt/_base/core_prompt.md\""
for APP in "${SELECTED_TYPES[@]}"; do
  for f in "$PROJECT_PATH/prompt/$APP/"*.md; do
    REL="prompt/${APP}/$(basename "$f")"
    PROMPTS_JSON+=", \"$REL\""
  done
done

cat <<EOF > "$CURSOR_JSON"
{
  "prompts": [ $PROMPTS_JSON ],
  "description": "$PROJECT_NAME prompt set"
}
EOF

cat <<EOF > "$WDS_JSON"
{
  "prompts": [ $PROMPTS_JSON ],
  "tags": ["$PROJECT_NAME"],
  "autoExpand": true
}
EOF

# Destination .gitignore for generated files
cat <<'EOF' > "$PROJECT_PATH/.gitignore"
# Generated by deploy_prompts.sh
combined_prompt.md
.claude.md
.gemini.md
EOF

echo ""
echo "🎉 Done! Prompts deployed to: $PROJECT_PATH"
echo "   - Modular prompts in ./prompt/"
echo "   - Combined: ./combined_prompt.md (.claude.md / .gemini.md)"
echo "   - Tool configs: .cursor.json / .windsurf.json"
echo ""
